set(HEADER_FILES "")
set(SOURCE_FILES "")
set(SOURCE_FILES_C "")
set(RESOURCE_FILES "")
set(FIND_FILES_C "")
find_path(Fceux_PATH "Y:/code/fceux-2.3.0")

MACRO( MacroAddHeaderDefine file def )
	file(READ "${file}" STRING_SHARE)
	STRING(REGEX MATCH "#ifndef HEADER_${def}" STRING_RESULT ${STRING_SHARE})
	if("${STRING_RESULT}" STREQUAL "")
		MESSAGE("MacroAddHeaderDefine file=${file}")
		SET(STRING_SHARE "#ifndef HEADER_${def}\n#define HEADER_${def}\n\n${STRING_SHARE}\n#endif")
		string(REPLACE ";" "\;" STRING_SHARE "${STRING_SHARE}")
		#MESSAGE("STRING_SHARE=${STRING_SHARE}")
		file(WRITE "${file}" ${STRING_SHARE})
	endif()
ENDMACRO(MacroAddHeaderDefine)

set(FIND_FILES_H
"../Simulate/Tools.h"
"../Simulate/VNes.h"
"../Simulate/M171.h"
"../Simulate/M169.h"
"../Simulate/M174.h"
"../Simulate/waveout.h"
"MapperBase.h"
"M172Base.h"
"M169Base.h"
"M171Base.h"
"M174Base.h"
"M179Base.h"
"Precomp.h"
)
list(APPEND HEADER_FILES ${FIND_FILES_H})

set(FIND_FILES_S
"../Simulate/Tools.cpp"
"../Simulate/ConstData.cpp"
"MapperBase.cpp"
"M169Base.cpp"
"M172Base.cpp"
"M171Base.cpp"
"M174Base.cpp"
"M179Base.cpp"
"Hook/HookPpuview.cpp"
"Hook/HookMemview.cpp"
"Hook/HookDebugger.cpp"
"Hook/HookDebug.cpp"
"Hook/Hookines.cpp"
"Hook/Hooknsf.cpp"
"Hook/Hookppu.cpp"
"Hook/Hookx6502.cpp"
"Hook/HookCheat.cpp"
"Hook/HookCheatWin.cpp"
"Hook/Hooktiming.cpp"
"Hook/HookConfigCommon.cpp"
"Hook/cart.cpp"
)

set(FIND_FILES_S_PRIVATE
"../Simulate/waveout.c"
"../Simulate/LPC_D6_SYNTH.c"
"Precomp.cpp"
)
list(APPEND SOURCE_FILES ${FIND_FILES_S})
set(FIND_FILES_R
"../Simulate/Mapper.rc"
#"res/res.rc"
"Fceux.rc"
)
list(APPEND RESOURCE_FILES ${FIND_FILES_R})

source_group("mapper" FILES ${FIND_FILES_H} ${FIND_FILES_S} ${FIND_FILES_S_PRIVATE})

set(PROJECT_SOURCE_DIR ${Fceux_PATH})
list(APPEND INCLUDE_DEFINE ${PROJECT_SOURCE_DIR})
#[[
]]
MacroAddHeaderDefine("${PROJECT_SOURCE_DIR}/src/input/share.h" "SHARE")
MacroAddHeaderDefine("${PROJECT_SOURCE_DIR}/src/ppu.h" "PPU")
MacroAddHeaderDefine("${PROJECT_SOURCE_DIR}/src/state.h" "STATE")
MacroAddHeaderDefine("${PROJECT_SOURCE_DIR}/src/palette.h" "PALETTE")
#[[
set(FIND_FILES_H
	"../Simulate/CDImageFormats/CCDParser.h"
	"../Simulate/CDImageFormats/CUEParser.h"
	"../Simulate/CDImageFormats/ImageFormats.h"
	"../Simulate/CDImageFormats/ImageHelpers.h"
	"../Simulate/CDImageFormats/IMGParser.h"
	"../Simulate/CDImageFormats/MultiTrackImage.h"
	"../Simulate/CDImageFormats/RawCDFormats.h"
	"../Simulate/CDImageFormats/UDFAnalyzer.h"
	"../Simulate/CDImageFormats/MDS/MDSFormats.h"
	"../Simulate/CDImageFormats/MDS/MDSParser.h"
	"../Simulate/CDImageFormats/MDS/MDSRecordSet.h"
	"../Simulate/CDImageFormats/Filesystems/miniudf.h"
	"../Simulate/CDImageFormats/Filesystems/UDFHelpers.h"
	"../Simulate/CDImageFormats/Filesystems/UDFStructures.h"
)
list(APPEND HEADER_FILES ${FIND_FILES_H})
set(FIND_FILES_S
	"../Simulate/CDImageFormats/CCDParser.cpp"
	"../Simulate/CDImageFormats/CUEParser.cpp"
	"../Simulate/CDImageFormats/ImageFormats.cpp"
	"../Simulate/CDImageFormats/IMGParser.cpp"
	"../Simulate/CDImageFormats/RawCDFormats.cpp"
	"../Simulate/CDImageFormats/UDFAnalyzer.cpp"
	"../Simulate/CDImageFormats/MDS/MDSParser.cpp"
	"../Simulate/CDImageFormats/Filesystems/miniudf.cpp"
	"../Simulate/CDImageFormats/Filesystems/UDFHelpers.cpp"
)
list(APPEND SOURCE_FILES ${FIND_FILES_S})
source_group("CFilesystems" FILES ${FIND_FILES_H} ${FIND_FILES_S})
]]
set(FIND_FILES_H
"${PROJECT_SOURCE_DIR}/src/asm.h"
"${PROJECT_SOURCE_DIR}/src/cart.h"
"${PROJECT_SOURCE_DIR}/src/cheat.h"
"${PROJECT_SOURCE_DIR}/src/conddebug.h"
"${PROJECT_SOURCE_DIR}/src/debug.h"
"${PROJECT_SOURCE_DIR}/src/drawing.h"
"${PROJECT_SOURCE_DIR}/src/driver.h"
"${PROJECT_SOURCE_DIR}/src/drivers/common/args.h"
"${PROJECT_SOURCE_DIR}/src/drivers/common/cheat.h"
"${PROJECT_SOURCE_DIR}/src/drivers/common/config.h"
"${PROJECT_SOURCE_DIR}/src/drivers/common/hq2x.h"
"${PROJECT_SOURCE_DIR}/src/drivers/common/hq3x.h"
"${PROJECT_SOURCE_DIR}/src/drivers/common/nes_ntsc.h"
"${PROJECT_SOURCE_DIR}/src/drivers/common/nes_ntsc_config.h"
"${PROJECT_SOURCE_DIR}/src/drivers/common/nes_ntsc_impl.h"
"${PROJECT_SOURCE_DIR}/src/drivers/common/scale2x.h"
"${PROJECT_SOURCE_DIR}/src/drivers/common/scale3x.h"
"${PROJECT_SOURCE_DIR}/src/drivers/common/scalebit.h"
"${PROJECT_SOURCE_DIR}/src/drivers/common/vidblit.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/archive.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/args.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/cdlogger.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/cheat.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/common.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/config.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/debugger.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/debuggersp.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/directories.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/gui.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/guiconfig.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/header_editor.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/help.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/input.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/joystick.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/keyboard.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/keyscan.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/log.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/main.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/mapinput.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/memview.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/memviewsp.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/memwatch.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/monitor.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/netplay.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/ntview.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/oakra.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/palette.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/ppuview.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/pref.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/ram_search.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/ramwatch.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/replay.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/resource.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/sound.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/state.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/texthook.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/throttle.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/timing.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/tracer.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/video.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/wave.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/Win32InputBox.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/window.h"
"${PROJECT_SOURCE_DIR}/src/emufile.h"
"${PROJECT_SOURCE_DIR}/src/emufile_types.h"
"${PROJECT_SOURCE_DIR}/src/fceu.h"
"${PROJECT_SOURCE_DIR}/src/fcoeffs.h"
"${PROJECT_SOURCE_DIR}/src/fds.h"
"${PROJECT_SOURCE_DIR}/src/file.h"
"${PROJECT_SOURCE_DIR}/src/filter.h"
"${PROJECT_SOURCE_DIR}/src/fir/c44100ntsc.h"
"${PROJECT_SOURCE_DIR}/src/fir/c44100pal.h"
"${PROJECT_SOURCE_DIR}/src/fir/c48000ntsc.h"
"${PROJECT_SOURCE_DIR}/src/fir/c48000pal.h"
"${PROJECT_SOURCE_DIR}/src/fir/c96000ntsc.h"
"${PROJECT_SOURCE_DIR}/src/fir/c96000pal.h"
"${PROJECT_SOURCE_DIR}/src/git.h"
"${PROJECT_SOURCE_DIR}/src/ines-bad.h"
"${PROJECT_SOURCE_DIR}/src/ines-correct.h"
"${PROJECT_SOURCE_DIR}/src/ines.h"
"${PROJECT_SOURCE_DIR}/src/input.h"
"${PROJECT_SOURCE_DIR}/src/input/fkb.h"
"${PROJECT_SOURCE_DIR}/src/input/share.h"
"${PROJECT_SOURCE_DIR}/src/input/suborkb.h"
"${PROJECT_SOURCE_DIR}/src/movie.h"
"${PROJECT_SOURCE_DIR}/src/netplay.h"
"${PROJECT_SOURCE_DIR}/src/nsf.h"
"${PROJECT_SOURCE_DIR}/src/oldmovie.h"
"${PROJECT_SOURCE_DIR}/src/palette.h"
"${PROJECT_SOURCE_DIR}/src/ppu.h"
"${PROJECT_SOURCE_DIR}/src/sound.h"
"${PROJECT_SOURCE_DIR}/src/state.h"
"${PROJECT_SOURCE_DIR}/src/types-des.h"
"${PROJECT_SOURCE_DIR}/src/types.h"
"${PROJECT_SOURCE_DIR}/src/unif.h"
"${PROJECT_SOURCE_DIR}/src/utils/ConvertUTF.h"
"${PROJECT_SOURCE_DIR}/src/utils/crc32.h"
"${PROJECT_SOURCE_DIR}/src/utils/endian.h"
"${PROJECT_SOURCE_DIR}/src/utils/general.h"
"${PROJECT_SOURCE_DIR}/src/utils/guid.h"
"${PROJECT_SOURCE_DIR}/src/utils/ioapi.h"
"${PROJECT_SOURCE_DIR}/src/utils/md5.h"
"${PROJECT_SOURCE_DIR}/src/utils/memory.h"
"${PROJECT_SOURCE_DIR}/src/utils/unzip.h"
"${PROJECT_SOURCE_DIR}/src/utils/valuearray.h"
"${PROJECT_SOURCE_DIR}/src/utils/xstring.h"
"${PROJECT_SOURCE_DIR}/src/palettes/palettes.h"
"${PROJECT_SOURCE_DIR}/src/palettes/rp2c04001.h"
"${PROJECT_SOURCE_DIR}/src/palettes/rp2c04002.h"
"${PROJECT_SOURCE_DIR}/src/palettes/rp2c04003.h"
"${PROJECT_SOURCE_DIR}/src/palettes/rp2c05004.h"
"${PROJECT_SOURCE_DIR}/src/version.h"
"${PROJECT_SOURCE_DIR}/src/video.h"
"${PROJECT_SOURCE_DIR}/src/vsuni.h"
"${PROJECT_SOURCE_DIR}/src/wave.h"
"${PROJECT_SOURCE_DIR}/src/x6502.h"
"${PROJECT_SOURCE_DIR}/src/x6502abbrev.h"
"${PROJECT_SOURCE_DIR}/src/x6502struct.h"
)
list(APPEND HEADER_FILES ${FIND_FILES_H})
set(FIND_FILES_S
"${PROJECT_SOURCE_DIR}/src/boards/01-222.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/09-034a.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/103.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/106.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/108.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/112.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/116.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/117.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/120.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/121.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/12in1.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/15.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/151.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/156.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/158B.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/164.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/168.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/170.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/175.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/176.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/177.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/178.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/18.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/183.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/185.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/186.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/187.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/189.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/190.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/193.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/199.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/206.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/208.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/222.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/225.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/228.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/230.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/232.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/234.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/235.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/244.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/246.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/252.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/253.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/28.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/32.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/33.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/34.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/36.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/3d-block.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/40.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/41.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/411120-c.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/42.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/43.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/46.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/50.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/51.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/57.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/603-5052.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/62.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/65.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/67.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/68.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/69.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/71.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/72.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/77.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/79.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/80.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/80013-B.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/8157.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/82.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/8237.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/830118C.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/88.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/8in1.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/90.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/91.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/96.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/99.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ac-08.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/bb.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/BMW8544.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/bs4xxxr.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/cheapocabra.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/cityfighter.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/coolboy.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/dance2000.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/eh8813a.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/et-100.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/et-4320.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/F-15.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/famicombox.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ffe.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/fns.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/hp10xx_hp20xx.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/hp898f.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ks7010.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ks7012.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ks7013.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ks7016.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ks7017.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ks7030.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ks7031.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ks7037.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ks7057.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/le05.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/lh32.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/lh53.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/mihunche.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/mmc2and4.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/onebus.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/pec-586.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/rt-01.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/sa-9602b.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/sb-2000.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/transformer.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/unrom512.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/vrc1.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/vrc2and4.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/vrc3.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/vrc6.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/vrc7.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/vrc7p.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/yoko.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/__dummy_mapper.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/a9746.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/addrlatch.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ax5705.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/bandai.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/bmc13in1jy110.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/bmc42in1r.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/bmc64in1nr.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/bmc70in1.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/bonza.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/bs-5.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/datalatch.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/dream.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/edu2000.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/fk23c.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ghostbusters63in1.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/gs-2004.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/gs-2013.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/h2288.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/inlnsf.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/karaoke.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/kof97.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/vrc5.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/ks7032.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/malee.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/mmc1.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/mmc3.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/mmc5.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/n106.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/n625092.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/novel.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/sachen.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/sc-127.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/sheroes.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/sl1632.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/subor.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/super24.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/supervision.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/t-227-1.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/t-262.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/tengen.cpp"
"${PROJECT_SOURCE_DIR}/src/boards/tf-1201.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/common/args.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/common/cheat.cpp"
#"${PROJECT_SOURCE_DIR}/src/drivers/common/config.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/common/hq2x.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/common/hq3x.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/common/scale2x.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/common/scale3x.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/common/scalebit.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/common/vidblit.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/archive.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/args.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/aviout.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/cdlogger.cpp"
#"${PROJECT_SOURCE_DIR}/src/drivers/win/cheat.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/common.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/config.cpp"
#"${PROJECT_SOURCE_DIR}/src/drivers/win/debugger.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/debuggersp.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/directories.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/gui.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/guiconfig.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/header_editor.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/help.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/input.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/joystick.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/keyboard.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/log.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/main.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/mapinput.cpp"
#"${PROJECT_SOURCE_DIR}/src/drivers/win/memview.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/memviewsp.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/memwatch.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/monitor.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/movieoptions.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/netplay.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/ntview.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/OutputDS.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/palette.cpp"
#"${PROJECT_SOURCE_DIR}/src/drivers/win/ppuview.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/pref.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/ram_search.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/ramwatch.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/replay.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/sound.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/state.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/texthook.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/throttle.cpp"
#"${PROJECT_SOURCE_DIR}/src/drivers/win/timing.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/tracer.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/video.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/wave.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/Win32InputBox.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/window.cpp"
"${PROJECT_SOURCE_DIR}/src/emufile.cpp"
"${PROJECT_SOURCE_DIR}/src/input/arkanoid.cpp"
"${PROJECT_SOURCE_DIR}/src/input/bworld.cpp"
"${PROJECT_SOURCE_DIR}/src/input/cursor.cpp"
"${PROJECT_SOURCE_DIR}/src/input/fkb.cpp"
"${PROJECT_SOURCE_DIR}/src/input/fns.cpp"
"${PROJECT_SOURCE_DIR}/src/input/ftrainer.cpp"
"${PROJECT_SOURCE_DIR}/src/input/hypershot.cpp"
"${PROJECT_SOURCE_DIR}/src/input/mahjong.cpp"
"${PROJECT_SOURCE_DIR}/src/input/mouse.cpp"
"${PROJECT_SOURCE_DIR}/src/input/snesmouse.cpp"
"${PROJECT_SOURCE_DIR}/src/input/oekakids.cpp"
"${PROJECT_SOURCE_DIR}/src/input/pec586kb.cpp"
"${PROJECT_SOURCE_DIR}/src/input/powerpad.cpp"
"${PROJECT_SOURCE_DIR}/src/input/quiz.cpp"
"${PROJECT_SOURCE_DIR}/src/input/shadow.cpp"
"${PROJECT_SOURCE_DIR}/src/input/suborkb.cpp"
"${PROJECT_SOURCE_DIR}/src/input/toprider.cpp"
"${PROJECT_SOURCE_DIR}/src/input/virtualboy.cpp"
"${PROJECT_SOURCE_DIR}/src/input/zapper.cpp"
"${PROJECT_SOURCE_DIR}/src/input/lcdcompzapper.cpp"
"${PROJECT_SOURCE_DIR}/src/utils/crc32.cpp"
"${PROJECT_SOURCE_DIR}/src/utils/endian.cpp"
"${PROJECT_SOURCE_DIR}/src/utils/general.cpp"
"${PROJECT_SOURCE_DIR}/src/utils/guid.cpp"
"${PROJECT_SOURCE_DIR}/src/utils/ioapi.cpp"
"${PROJECT_SOURCE_DIR}/src/utils/md5.cpp"
"${PROJECT_SOURCE_DIR}/src/utils/memory.cpp"
"${PROJECT_SOURCE_DIR}/src/utils/unzip.cpp"
"${PROJECT_SOURCE_DIR}/src/utils/xstring.cpp"
"${PROJECT_SOURCE_DIR}/src/asm.cpp"
#"${PROJECT_SOURCE_DIR}/src/cart.cpp"
#"${PROJECT_SOURCE_DIR}/src/cheat.cpp"
"${PROJECT_SOURCE_DIR}/src/conddebug.cpp"
"${PROJECT_SOURCE_DIR}/src/config.cpp"
#"${PROJECT_SOURCE_DIR}/src/debug.cpp"
"${PROJECT_SOURCE_DIR}/src/drawing.cpp"
"${PROJECT_SOURCE_DIR}/src/fceu.cpp"
"${PROJECT_SOURCE_DIR}/src/fds.cpp"
"${PROJECT_SOURCE_DIR}/src/file.cpp"
"${PROJECT_SOURCE_DIR}/src/filter.cpp"
#"${PROJECT_SOURCE_DIR}/src/ines.cpp"
"${PROJECT_SOURCE_DIR}/src/input.cpp"
"${PROJECT_SOURCE_DIR}/src/movie.cpp"
"${PROJECT_SOURCE_DIR}/src/netplay.cpp"
#"${PROJECT_SOURCE_DIR}/src/nsf.cpp"
"${PROJECT_SOURCE_DIR}/src/oldmovie.cpp"
"${PROJECT_SOURCE_DIR}/src/palette.cpp"
#"${PROJECT_SOURCE_DIR}/src/ppu.cpp"
"${PROJECT_SOURCE_DIR}/src/sound.cpp"
"${PROJECT_SOURCE_DIR}/src/state.cpp"
"${PROJECT_SOURCE_DIR}/src/unif.cpp"
"${PROJECT_SOURCE_DIR}/src/video.cpp"
"${PROJECT_SOURCE_DIR}/src/vsuni.cpp"
"${PROJECT_SOURCE_DIR}/src/wave.cpp"
#"${PROJECT_SOURCE_DIR}/src/x6502.cpp"
)
list(APPEND SOURCE_FILES ${FIND_FILES_S})

set (LibOption "")
set (DefinedOption "")
set(USE_LUA OFF CACHE BOOL "UseLUA")
if(USE_LUA)
set(FIND_FILES_S
"${PROJECT_SOURCE_DIR}/src/drivers/win/lua/include/lauxlib.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/lua/include/lua.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/lua/include/lua.hpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/lua/include/luaconf.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/lua/include/lualib.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lapi.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lauxlib.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lcode.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/ldebug.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/ldo.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lfunc.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lgc.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/llex.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/llimits.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lmem.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lobject.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lopcodes.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lparser.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lstate.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lstring.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/ltable.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/ltm.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lua.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/luaconf.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lualib.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lundump.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lvm.h"
"${PROJECT_SOURCE_DIR}/src/lua/src/lzio.h"
"${PROJECT_SOURCE_DIR}/src/fceulua.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/luaconsole.cpp"
"${PROJECT_SOURCE_DIR}/src/lua-engine.cpp"
)
list(APPEND LibOption lua51 luaperks)
list(APPEND DefinedOption _USE_LUA)
list(APPEND SOURCE_FILES ${FIND_FILES_S})
source_group("Lua" FILES ${FIND_FILES_H} ${FIND_FILES_S} ${FIND_FILES_S_PRIVATE})
endif()

set(USE_TASEDITOR OFF CACHE BOOL "UseTaseditor")
if(USE_TASEDITOR)
list(APPEND DefinedOption _USE_TASEDITOR)
set(FIND_FILES_S
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/bookmark.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/bookmarks.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/branches.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/editor.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/greenzone.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/history.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/inputlog.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/laglog.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/markers.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/markers_manager.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/piano_roll.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/playback.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/popup_display.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/recorder.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/selection.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/snapshot.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/splicer.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/taseditor_config.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/taseditor_project.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/taseditor_window.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/taseditor_lua.h"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/taseditor_lua.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/bookmark.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/bookmarks.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/branches.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/editor.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/greenzone.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/history.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/inputlog.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/laglog.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/markers.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/markers_manager.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/piano_roll.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/playback.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/popup_display.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/recorder.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/selection.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/snapshot.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/splicer.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/taseditor_config.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/taseditor_project.cpp"
"${PROJECT_SOURCE_DIR}/src/drivers/win/taseditor/taseditor_window.cpp")
list(APPEND SOURCE_FILES ${FIND_FILES_S})
source_group("taseditor" FILES ${FIND_FILES_S})
endif()

list(APPEND FIND_FILES_S_PRIVATE 
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/adler32.c"
"${PROJECT_SOURCE_DIR}/src/drivers/common/nes_ntsc.c"
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/compress.c"
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/crc32.c"
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/deflate.c"
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/gzio.c"
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/infblock.c"
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/infcodes.c"
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/inffast.c"
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/inflate.c"
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/inftrees.c"
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/infutil.c"
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/trees.c"
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/uncompr.c"
"${PROJECT_SOURCE_DIR}/src/drivers/win/zlib/zutil.c"
"${PROJECT_SOURCE_DIR}/src/boards/emu2413.c"
"${PROJECT_SOURCE_DIR}/src/utils/ConvertUTF.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lapi.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lauxlib.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lbaselib.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lcode.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/ldblib.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/ldebug.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/ldo.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/ldump.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lfunc.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lgc.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/linit.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/liolib.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/llex.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lmathlib.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lmem.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/loadlib.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lobject.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lopcodes.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/loslib.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lparser.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lstate.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lstring.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lstrlib.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/ltable.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/ltablib.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/ltm.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lundump.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lvm.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/lzio.c"
"${PROJECT_SOURCE_DIR}/src/lua/src/print.c"
)
list(APPEND RESOURCE_FILES 
"${PROJECT_SOURCE_DIR}/src/drivers/win/res.rc"
)
set(INCLUDE_DEFINE 
	"${CMAKE_CURRENT_SOURCE_DIR}"
	"${CMAKE_CURRENT_SOURCE_DIR}/../Simulate"
	"${Fceux_PATH}/src"
	"${Fceux_PATH}/src/utils"
	"${Fceux_PATH}/src/palettes"
	"${Fceux_PATH}/src/fir"
	"${Fceux_PATH}/src/drivers/win/zlib"
	"${Fceux_PATH}/src/drivers/win/taseditor"
	"${Fceux_PATH}/src/drivers/win/res"
	"${Fceux_PATH}/src/drivers/win/directx"
	"${Fceux_PATH}/src/drivers/win/7zip"
	"${Fceux_PATH}/src/drivers/win"
	"${Fceux_PATH}/src/drivers/videolog"
	"${Fceux_PATH}/src/drivers/sdl"
	"${Fceux_PATH}/src/drivers/common"
	"${Fceux_PATH}/src/drivers"
	"${Fceux_PATH}/src/boards"
	"${Fceux_PATH}/src/attic/sexyal/drivers"
	"${Fceux_PATH}/src/attic/sexyal"
	"${Fceux_PATH}/src/attic/pc"
	"${Fceux_PATH}/src/attic"
	"${Fceux_PATH}/src/input"
	"${Fceux_PATH}/src/lua/src"
)
source_group("Resource" FILES ${RESOURCE_FILES})

link_directories(
	"${CMAKE_CURRENT_SOURCE_DIR}/../Simulate/lib"
)
if(CMAKE_CL_64)
set(DirectXTK x64)
link_directories(
	${Fceux_PATH}/src/drivers/win/directx/x64
	${Fceux_PATH}/src/drivers/win/lua/x64
	)
else()
link_directories(
	${Fceux_PATH}/src/drivers/win/directx
	${Fceux_PATH}/src/drivers/win/lua/win32
)
endif()

set(OUT_FILENAME "FCeux")
add_executable(${OUT_FILENAME} ${SOURCE_FILES} ${HEADER_FILES} ${RESOURCE_FILES} ${FIND_FILES_S_PRIVATE} ${SOURCE_FILES_C})
#add_executable(${OUT_FILENAME} WIN32 ${SOURCE_FILES} ${HEADER_FILES} ${RESOURCE_FILES} ${FIND_FILES_S_PRIVATE} ${SOURCE_FILES_C})
set_source_files_properties("Precomp.cpp" PROPERTIES COMPILE_FLAGS /Yc"Precomp.h" )
set_source_files_properties(${SOURCE_FILES} PROPERTIES COMPILE_FLAGS "/FIPrecomp.h /YuPrecomp.h")

target_compile_definitions("${OUT_FILENAME}" PRIVATE
_SIMULATE_FCEUX
DIRECTINPUT_VERSION=0x0800
_CRT_SECURE_NO_DEPRECATE
_WIN32_WINDOWS=0x0501
WINVER=0x0501
NETWORK
LSB_FIRST
_USE_32BIT_TIME_T
FCEUDEF_DEBUGGER
_USE_SHARED_MEMORY_
NOMINMAX
HAS_vsnprintf
_S9XLUA_H
MSVC
${DefinedOption}
)
#set_property(TARGET "${OUT_FILENAME}" PROPERTY FOLDER "${TOOLS_FOLDER}")
MACRO_SET_OUT_PATH(${OUT_FILENAME})
target_include_directories("${OUT_FILENAME}" PRIVATE
	${INCLUDE_DEFINE}
	)
target_link_libraries("${OUT_FILENAME}" libCDImage libmhook dsound dxguid ddraw dinput dinput8 Rpcrt4 comctl32 vfw32 winmm ws2_32 htmlhelp psapi mpr
${LibOption})

string(REPLACE "/" "\\" COPY_FILES "${CMAKE_CURRENT_SOURCE_DIR}/release/*.*")
add_custom_command(TARGET "${OUT_FILENAME}"
			   POST_BUILD
			   COMMAND ECHO Copy "${COPY_README}" To "$(TargetDir)"
			   COMMAND if \"$<CONFIG:Release>\"=="1" copy /y "${COPY_FILES}" "$(TargetDir)" && del \"$(TargetDir)${OUT_FILENAME}.ilk\"
			   )
