# Configure MyOGRE build
cmake_minimum_required(VERSION 3.1.0)

#project("STAR Tools")

SET(LIBRARY_FOLDER "Library")
SET(TOOLS_FOLDER "Tools")
SET(GAMETOOLS_FOLDER "Games")
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
SET(CMAKE_DEBUG_POSTFIX "D")

set(INCLUDE_COMMON ${CMAKE_CURRENT_SOURCE_DIR}/librarys/common)

unset(CMAKE_C_FLAGS_DEBUG CACHE)
unset(CMAKE_CXX_FLAGS_RELWITHDEBINFO CACHE)
unset(CMAKE_CXX_FLAGS_DEBUG CACHE)
unset(CMAKE_CXX_FLAGS_MINSIZEREL CACHE)
unset(CMAKE_CXX_FLAGS_RELEASE CACHE)
unset(CMAKE_C_FLAGS_MINSIZEREL CACHE)
unset(CMAKE_C_FLAGS_RELEASE CACHE)
unset(CMAKE_C_FLAGS_RELWITHDEBINFO CACHE)
unset(CMAKE_EXE_LINKER_FLAGS_DEBUG CACHE)
unset(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL CACHE)
unset(CMAKE_EXE_LINKER_FLAGS_RELEASE CACHE)
unset(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO CACHE)
unset(CMAKE_MODULE_LINKER_FLAGS_DEBUG CACHE)
unset(CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL CACHE)
unset(CMAKE_MODULE_LINKER_FLAGS_RELEASE CACHE)
unset(CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO CACHE)
unset(CMAKE_SHARED_LINKER_FLAGS_DEBUG CACHE)
unset(CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL CACHE)
unset(CMAKE_SHARED_LINKER_FLAGS_RELEASE CACHE)
unset(CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO CACHE)

#安装目录
set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install CACHE STRING install FORCE)
link_directories(${CMAKE_BINARY_DIR}/lib)

#add_definitions(-D_WIN32_WINNT=0x502 -DWINVER=0x502 -D_WIN32_IE=0x502)
#add_definitions(-D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -D_WIN32_IE=0x0800 -DUNICODE -D_UNICODE -Dstring=wstring)
add_definitions(-D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -D_WIN32_IE=0x0800)

MACRO( MACRO_SET_PRECOMPILEDHEADER target header create )
	target_compile_options("${target}" PRIVATE  /Yu)
	set_source_files_properties(${create} PROPERTIES COMPILE_FLAGS /Yc"${header}" )
ENDMACRO(MACRO_SET_PRECOMPILEDHEADER)


MACRO( MACRO_SET_OUT_PATH target)

	set(category .)
	set_property(TARGET "${target}" PROPERTY LINK_FLAGS_RELEASE "/NODEFAULTLIB:libcmtd.lib /NODEFAULTLIB:msvcrt.lib /NODEFAULTLIB:msvcrtd.lib")
	set_property(TARGET "${target}" PROPERTY LINK_FLAGS_RSYMBLE "/NODEFAULTLIB:libcmtd.lib /NODEFAULTLIB:msvcrt.lib /NODEFAULTLIB:msvcrtd.lib")
	set_property(TARGET "${target}" PROPERTY LINK_FLAGS_RDEBUG "/NODEFAULTLIB:libcmtd.lib /NODEFAULTLIB:msvcrt.lib /NODEFAULTLIB:msvcrtd.lib")

	set_property(TARGET "${target}" PROPERTY RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/bin/${category}/Release")
	set_property(TARGET "${target}" PROPERTY RUNTIME_OUTPUT_DIRECTORY_RSYMBLE "${CMAKE_BINARY_DIR}/bin/${category}/RSymble")
	set_property(TARGET "${target}" PROPERTY RUNTIME_OUTPUT_DIRECTORY_RDEBUG "${CMAKE_BINARY_DIR}/bin/${category}/RDebug")

	set_property(TARGET "${target}" PROPERTY LIBRARY_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/lib/Release")
	set_property(TARGET "${target}" PROPERTY LIBRARY_OUTPUT_DIRECTORY_RSYMBLE "${CMAKE_BINARY_DIR}/lib/RSymble")
	set_property(TARGET "${target}" PROPERTY LIBRARY_OUTPUT_DIRECTORY_RDEBUG "${CMAKE_BINARY_DIR}/lib/RDebug")

	set_property(TARGET "${target}" PROPERTY ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/lib/Release")
	set_property(TARGET "${target}" PROPERTY ARCHIVE_OUTPUT_DIRECTORY_RSYMBLE "${CMAKE_BINARY_DIR}/lib/RSymble")
	set_property(TARGET "${target}" PROPERTY ARCHIVE_OUTPUT_DIRECTORY_RDEBUG "${CMAKE_BINARY_DIR}/lib/RDebug")
	   
	target_compile_definitions("${OUT_FILENAME}" PRIVATE
		$<$<CONFIG:Release>:NDEBUG _RELEASE>
		$<$<CONFIG:RSymble>:NDEBUG _RSYMBLE>
		$<$<CONFIG:RDebug>:NDEBUG _RDEBUG>
	)
	set_target_properties(${target} PROPERTIES LINK_FLAGS_RDEBUG "/Debug")
	set_target_properties(${target} PROPERTIES LINK_FLAGS_RSYMBLE "/Debug")
	
	if(USE_PRECOMPILED_HEADER)
		MACRO_SET_PRECOMPILEDHEADER("${target}" "StdAfx.h" "StdAfx.cpp")
	endif()
	
add_custom_command(TARGET "${target}"
                   POST_BUILD
                   COMMAND echo [ $(TargetDir) ]
                   )

ENDMACRO(MACRO_SET_OUT_PATH)


MACRO(resetglobalvar compile linker)

set(CMAKE_CONFIGURATION_TYPES Release;RDebug;RSymble CACHE STRING config FORCE)

set(CMAKE_C_FLAGS_RELEASE "-Zm200 /GL /MT /Os /Ob1 /O1 /W0 /GS /Zc:wchar_t ${compile}" CACHE STRING config FORCE)
set(CMAKE_C_FLAGS_RSYMBLE "-Zm200 /GL /MT /Os /Zi /Ob1 /O1 /W0 /GS /Zc:wchar_t ${compile}" CACHE STRING config FORCE)
set(CMAKE_C_FLAGS_RDEBUG "-Zm200 /MT /Od /Zi /W0 /GS /Zc:wchar_t ${compile}" CACHE STRING config FORCE)

set(CMAKE_CXX_FLAGS_RELEASE "-Zm200 /GL /MT /Os /Ob1 /O1 /W0 /GS /Zc:wchar_t ${compile}" CACHE STRING config FORCE)
set(CMAKE_CXX_FLAGS_RSYMBLE "-Zm200 /GL /MT /Os /Zi /Ob1 /O1 /W0 /GS /Zc:wchar_t ${compile}" CACHE STRING config FORCE)
set(CMAKE_CXX_FLAGS_RDEBUG "-Zm200 /MT /Od /Zi /W0 /GS /Zc:wchar_t ${compile}" CACHE STRING config FORCE)

set(CMAKE_EXE_LINKER_FLAGS_RELEASE "/LTCG /RELEASE /INCREMENTAL:NO ${linker}" CACHE STRING config FORCE)
set(CMAKE_EXE_LINKER_FLAGS_RSYMBLE "/LTCG /RELEASE /INCREMENTAL:NO ${linker}" CACHE STRING config FORCE)
set(CMAKE_EXE_LINKER_FLAGS_RDEBUG "/DEBUG /RELEASE /INCREMENTAL:NO ${linker}" CACHE STRING config FORCE)

set(CMAKE_MODULE_LINKER_FLAGS_RELEASE "/LTCG /INCREMENTAL:NO ${linker}" CACHE STRING config FORCE)
set(CMAKE_MODULE_LINKER_FLAGS_RSYMBLE "/LTCG /INCREMENTAL:NO ${linker}" CACHE STRING config FORCE)
set(CMAKE_MODULE_LINKER_FLAGS_RDEBUG "/DEBUG /INCREMENTAL:NO ${linker}" CACHE STRING config FORCE)

set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "/LTCG /RELEASE /INCREMENTAL:NO ${linker}" CACHE STRING config FORCE)
set(CMAKE_SHARED_LINKER_FLAGS_RSYMBLE "/LTCG /RELEASE /INCREMENTAL:NO ${linker}" CACHE STRING config FORCE)
set(CMAKE_SHARED_LINKER_FLAGS_RDEBUG "/DEBUG /RELEASE /INCREMENTAL:NO ${linker}" CACHE STRING config FORCE)

ENDMACRO(resetglobalvar)

resetglobalvar("" "")

set(USE_TOOLS_FCeux OFF CACHE BOOL "FCeux")
if(USE_TOOLS_FCeux)
	set(USE_LIB_ZSTD ON)
	set(USE_LIB_MHOOK ON)
	project("FCeux")
	add_subdirectory(FCeux)
endif()

set(USE_TOOLS_VirtuaNES OFF CACHE BOOL "VirtuaNES")
if(USE_TOOLS_VirtuaNES)
	set(USE_LIB_ZSTD ON)
	set(USE_LIB_MHOOK ON)
	project("VirtuaNES")
	add_subdirectory(VirtuaNES)
endif()

set(USE_TOOLS_Mesen OFF CACHE BOOL "Mesen")
if(USE_TOOLS_Mesen)
	set(USE_LIB_ZSTD ON)
	set(USE_LIB_SOUI ON)
	set(USE_LIB_MHOOK ON)
	project("Mesen")
	add_subdirectory(Mesen)
endif()

if(USE_LIB_MHOOK)
	add_subdirectory(mhook)
endif()

add_subdirectory(CDImage)
